```{julia}
read(run(`powershell cls`), String)

```


```{julia}
#using Pkg; Pkg.add(["ToolipsCrawl"])

```


```{julia}
using HTTP, JSON
using DataFrames
using Tidier
using TidierVest
using Chain
using BenchmarkTools
using Printf
using CSV
using XLSX

```



```{julia}
private_start_url = "https://hfrs.moh.go.tz/web/index.php?r=portal%2Fquick-search&filters=priv&page=1"
public_start_url = "https://hfrs.moh.go.tz/web/index.php?r=portal%2Fquick-search&filters=publ&page=1"

```



```{julia}
function last_page(start_page)
  @chain start_page begin
    read_html(_)
    html_elements(_, ".page-item.last")
    html_elements(_, ".page-link")
    html_attrs(_, "href")
    match(r"\d*$", _[1]).match
    parse(Int, _)
  end
end

```



```{julia}
private_last_page_number = last_page(private_start_url)
public_last_page_number = last_page(public_start_url)

```



```{julia}
public_base_url = "https://hfrs.moh.go.tz/web/index.php?r=portal%2Fquick-search&filters=publ&page="
private_base_url = "https://hfrs.moh.go.tz/web/index.php?r=portal%2Fquick-search&filters=priv&page="

```



```{julia}
function generate_all_links(base_url::String, last_page_number::Int)
    links = map(1:last_page_number) do x
        @sprintf("%s%d", base_url, x)
    end
    return links
end

```



```{julia}
all_links_private = generate_all_links(private_base_url, private_last_page_number)
all_links_public = generate_all_links(public_base_url, public_last_page_number)

```



```{julia}
all_links = append!(all_links_private, all_links_public)
#all_links = vcat(all_links_private, all_links_public)

```



```{julia}
function get_data(link)
  @chain link begin
    read_html(_)
    html_elements(_, [".kv-grid-table", ".table", ".table-bordered",".table-striped", ".kv-table-wrap"])
    html_table(_)
  end
end
```



```{julia}
number_of_tasks = length(all_links)
results = Vector{DataFrame}(undef, number_of_tasks) #5

```



```{julia}
@time asyncmap(all_links; ntasks = 100) do link
    data = get_data(link)
    println("$link scraped successfully!")
    return data
end |> (x -> results .= x)


```



```{julia}
# Merge the results into a single DataFrame
facilities_data = vcat(results...)

# Merge the results and save them in a DataFrame
facilities_data = DataFrame(facilities_data)

```


```{julia}
facilities_data = facilities_data[:, 1:end-2]

```


```{julia}
pretty_table(facilities_data)
println(facilities_data)

```




```{julia}
facilities_data .= string.(facilities_data)

```



```{julia}
#rename!(facilities_data, :"#" => :"`#`")
#rename!(facilities_data, :"#" => :Number)
```



```{julia}
for col in names(facilities_data)
    println("Column: $col, Type: $(eltype(facilities_data[!, col]))")
end

```



```{julia}
XLSX.writetable("./Output/HFRS Julia 15 Mar 24.xlsx", collect(eachcol(facilities_data)),
                names(facilities_data))
```



```{julia}
#CSV.write(facilities_data, "HFRS Julia 15 Mar 24.csv")

```